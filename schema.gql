# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AsymmetricActionInput {
  action: EncryptionAction!
  data: String!
  key: String!
}

type CryptographicOutput {
  output: String!
}

input ECKeyPairInput {
  namedCurve: String!
}

enum EncryptionAction {
  DECRYPT
  ENCRYPT
}

input HMACInput {
  data: String!
  hashAlgo: String!
  secret: String!
}

input HashInput {
  data: String!
  hashAlgo: String!
}

type KeyPairOutput {
  privateKey: String!
  publicKey: String!
}

type Mutation {
  asymmetricAction(input: AsymmetricActionInput!): CryptographicOutput!
  signData(input: SignDataInput!): CryptographicOutput!
  symmetricAction(input: SymmetricActionInput!): CryptographicOutput!
  verifySignature(input: VerifyDataInput!): VerificationOutput!
}

type Query {
  generateECPair(input: ECKeyPairInput!): KeyPairOutput!
  generateHMAC(input: HMACInput!): CryptographicOutput!
  generateIV: CryptographicOutput!
  generateRSAPair(input: RSAKeyPairInput!): KeyPairOutput!
  generateSymmetricKey: CryptographicOutput!
  hashData(input: HashInput!): CryptographicOutput!
}

input RSAKeyPairInput {
  modulusLength: Float!
}

input SignDataInput {
  data: String!
  hashAlgo: String!
  key: String!
}

input SymmetricActionInput {
  action: EncryptionAction!
  algo: String!
  data: String!
  iv: String!
  key: String!
}

type VerificationOutput {
  isValid: Boolean!
}

input VerifyDataInput {
  data: String!
  hashAlgo: String!
  key: String!
  signature: String!
}
